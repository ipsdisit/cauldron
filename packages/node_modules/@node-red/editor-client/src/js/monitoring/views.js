RED.monitoring.view = (function () {
    const monitoringSizeObserver = new ResizeObserver((entries) => {
        for (const entry of entries) {
            const nodeId = entry.target.id.split('-')[1];
            const monitoringDetailsForeign = document.getElementById(`monitoringDetails-${nodeId}`);

            if (nodeId && monitoringDetailsForeign && entry.borderBoxSize != undefined) {
                if (entry.borderBoxSize.blockSize == 0)
                    return;
                else if (entry.borderBoxSize[0] != undefined && entry.borderBoxSize[0].blockSize == 0)
                    return;

                monitoringDetailsForeign.setAttribute('height', entry.borderBoxSize.blockSize || entry.borderBoxSize[0].blockSize);
            }
        }
    });

    function waitForElm(nodeId) {
        return new Promise(resolve => {
            if (document.getElementById(nodeId)) {
                return resolve(document.getElementById(nodeId));
            }
    
            const observer = new MutationObserver(mutations => {
                if (document.getElementById(nodeId)) {
                    resolve(document.getElementById(nodeId));
                    observer.disconnect();
                }
            });
    
            observer.observe(document.body, {
                childList: true,
                subtree: true
            });
        });
    }

    function injectHTMLIntoNode(nodeId) {
        waitForElm(nodeId).then(elm => {
            injectMonitoringButton(nodeId);
            injectMonitoringDetails(nodeId);
        });
    }

    function injectMonitoringButton(nodeId) {
        if (document.getElementById(`monitoringButton-${nodeId}`)) return;

        const nodeElement = document.getElementById(nodeId);
        const nodeWidth = nodeElement.querySelector('.red-ui-flow-node').getAttribute('width');
        const rightGroup = nodeElement.querySelector('g .red-ui-flow-node-icon-group-right');

        const monitoringForeign = document.createElementNS('http://www.w3.org/2000/svg', 'foreignObject');
        monitoringForeign.setAttribute('id', `monitoringButton-${nodeId}`);
        monitoringForeign.setAttribute('width', 28);
        monitoringForeign.setAttribute('height', 28);
        monitoringForeign.setAttribute('x', (rightGroup == null ? nodeWidth - 30 : 9));
        monitoringForeign.setAttribute('y', 0.5);

        const buttonDiv = document.createElement('div');

        buttonDiv.style = 'width: 20px; height: 28px; background: transparent; margin-left:0.3em';
        buttonDiv.innerHTML = `<i id="toggleMonitoring-${nodeId}" style="padding-top: 0.4em;" class="fa fa-bug"></i>`;

        monitoringForeign.appendChild(buttonDiv);
        nodeElement.appendChild(monitoringForeign);

        document.getElementById(`toggleMonitoring-${nodeId}`).addEventListener('click', toggleMonitoring.bind(null, nodeId));
    }

    function updateMonitoringSize(nodeId) {
        const nodeElement = document.getElementById(nodeId);
        const nodeWidth = nodeElement.querySelector('.red-ui-flow-node').getAttribute('width');
        const rightGroup = nodeElement.querySelector('g .red-ui-flow-node-icon-group-right');

        const monitoringForeign = document.getElementById(`monitoringButton-${nodeId}`);
        if (monitoringForeign) monitoringForeign.setAttribute('x', (rightGroup == null ? nodeWidth - 30 : 9));


        const monitoringDetailsForeign = document.getElementById(`monitoringDetails-${nodeId}`);
        if (monitoringDetailsForeign) monitoringDetailsForeign.setAttribute('width', (nodeWidth < 140 ? 150 : nodeWidth));
    }

    function injectMonitoringDetails(nodeId) {
        if (document.getElementById(`monitoringDetails-${nodeId}`)) return;

        const nodeElement = document.getElementById(nodeId);
        const nodeWidth = nodeElement.querySelector('.red-ui-flow-node').getAttribute('width');

        const monitoringDetailsForeign = document.createElementNS('http://www.w3.org/2000/svg', 'foreignObject');
        monitoringDetailsForeign.setAttribute('id', `monitoringDetails-${nodeId}`);
        monitoringDetailsForeign.setAttribute('width', (nodeWidth < 140 ? 150 : nodeWidth));
        monitoringDetailsForeign.setAttribute('height', 0);
        monitoringDetailsForeign.setAttribute('x', 0);
        monitoringDetailsForeign.setAttribute('y', 30);

        const iDiv = document.createElement('div');
        iDiv.setAttribute('id', `monitoring-${nodeId}`);
        iDiv.setAttribute('class', 'monitoring-div');
        iDiv.style.display = 'none';
        iDiv.style.backgroundColor = 'white';

        iDiv.innerHTML += '<div class="monitoring-graphics" style="padding-bottom: 0.5em;">'
            + `<div style="padding-left: 0.5em; padding-right: 0.5em;"><canvas id="chart-${nodeId}" width="${(nodeWidth < 140 ? 150 : nodeWidth)}" height="35" style="max-height: 42px; "></canvas></div>`
            + '</div>'

            + `<div style="display: flex; justify-content: center;"><i id="toggleMonitoringDetails-${nodeId}" class="fa fa-chevron-down"></i></div>`
            + '<div class="monitoring-details" style="display: none; padding-top: 0.2em;">'

            + '<div class="monitoring-messages">'
            + `<div>Track: <input type="text" id="track-${nodeId}" style="width: 95%; height: 25px;"></div>`
            + '<span>Messages:</span>'
            + `<i id="inject-${nodeId}" style="float:right; padding-top: 0.2em; padding-right: 0.3em;" class="fa fa-paper-plane"></i>`
            + `<i id="expand-${nodeId}" style="float:right; padding-top: 0.3em; padding-right: 0.3em;" class="fa fa-external-link"></i>`
            + `<i id="clearMessages-${nodeId}" style="float:right; padding-top: 0.2em; padding-right: 0.5em;" class="fa fa-trash"></i>`
            + '<div class="monitoring-values" style="padding-left: 0.7em;"></div>'
            + '</div>'

            + '<div class="breakpoint">' + '<span> &nbsp </span>'
            + `<i id="step-${nodeId}" style="display: none; float:right; padding-top: 0.2em; padding-right: 0.3em;" class="fa fa-step-forward"></i>`
            + `<i id="playPause-${nodeId}" style="float:right; padding-top: 0.2em; padding-right: 0.3em;" class="fa ${RED.monitoring.data[nodeId].settings.pauseDebug?"fa-play":"fa-pause"}"></i>`
            + `<i id="clear-${nodeId}" style="display: none; float:right; padding-top: 0.2em; padding-right: 0.3em;" class="fa fa-trash"></i>`
            + '</div>'

            + '</div>';

        monitoringDetailsForeign.appendChild(iDiv);
        const nodeStatus = nodeElement.querySelector('.red-ui-flow-node-status-group');
        if (nodeStatus != undefined && nodeStatus.display != 'none')
            nodeElement.insertBefore(monitoringDetailsForeign, nodeStatus);
        else
            nodeElement.appendChild(monitoringDetailsForeign);

        monitoringSizeObserver.observe(iDiv);

        const currentNode = RED.nodes.node(nodeId);

        document.getElementById(`toggleMonitoringDetails-${nodeId}`).addEventListener('click', toggleMonitoringDetails.bind(null, nodeId));
        document.getElementById(`expand-${nodeId}`).addEventListener('click', openLastMessages.bind(null, nodeId));

        document.getElementById(`track-${nodeId}`).addEventListener('focus', focusOnInput.bind(null, nodeId));
        document.getElementById(`track-${nodeId}`).addEventListener('blur', removeFocus.bind(null, nodeId));
        document.getElementById(`track-${nodeId}`).addEventListener('change', updateQueue.bind(null, nodeId));


        if (currentNode.inputs == 0) document.getElementById(`inject-${nodeId}`).style.display = 'none';
        else document.getElementById(`inject-${nodeId}`).addEventListener('click', openInjectMessageModal.bind(null, nodeId));

        document.getElementById(`clearMessages-${nodeId}`).addEventListener('click', clearMessages.bind(null, nodeId));

        if (currentNode.type == 'debug' || currentNode.inputs == 0) {
            nodeElement.querySelector('div .breakpoint').style.display = 'none';
            return;
        }

        document.getElementById(`clear-${nodeId}`).addEventListener('click', clearBreakpoint.bind(null, nodeId));
        document.getElementById(`playPause-${nodeId}`).addEventListener('click', playPauseBreakpoint.bind(null, nodeId));
        document.getElementById(`step-${nodeId}`).addEventListener('click', stepBreakpoint.bind(null, nodeId));
    }

    function focusOnInput(nodeId) {
        RED.keyboard.disable();
    }

    function removeFocus(nodeId) {
        RED.keyboard.enable();
    } 

    function updateQueue(nodeId){
        if(RED.monitoring.settings.debugType == 'dynamic')
            RED.monitoring.updateQueue(nodeId, getTrackedAttribute(nodeId));
    }

    function toggleMonitoring(nodeId) {
        const nodeDataDiv = document.getElementById(`monitoring-${nodeId}`);

        nodeDataDiv.style.display = (nodeDataDiv.style.display == 'none' ? '' : 'none');

        const monitoringDetailsForeign = document.getElementById(`monitoringDetails-${nodeId}`);
        monitoringDetailsForeign.setAttribute('height', (nodeDataDiv.style.display == 'none' ? 0 : 85));

        const monitoringDetailsDiv = nodeDataDiv.querySelector('.monitoring-details');
        monitoringDetailsDiv.style.display = 'none';
    }

    function toggleMonitoringDetails(nodeId) {
        const monitoringDiv = document.getElementById(`monitoring-${nodeId}`);
        const nodeDataDiv = monitoringDiv.querySelector('.monitoring-details');

        nodeDataDiv.style.display = (nodeDataDiv.style.display == 'none' ? '' : 'none');

        const monitoringDetailsForeign = document.getElementById(`monitoringDetails-${nodeId}`);
        monitoringDetailsForeign.setAttribute('height', (nodeDataDiv.style.display == 'none' ? 85 : 200));
    }

    function addMonitoringModal() {
        const monitoringModal = document.createElement('div');
        monitoringModal.setAttribute('id', 'monitoringModal');
        monitoringModal.setAttribute('class', 'modal');
        monitoringModal.innerHTML = '<div class="modal-content"><span class="close">&times;</span><div></div></div>';

        document.body.appendChild(monitoringModal);

        document.getElementsByClassName('close')[0].addEventListener('click', () => {
            monitoringModal.style.display = 'none';
        });

        window.onclick = function (event) {
            if (event.target == monitoringModal) {
                monitoringModal.style.display = 'none';
            }
        };
    }

    function openMonitoringModal() {
        const monitoringModal = document.getElementById('monitoringModal');
        monitoringModal.style.display = 'block';

        return monitoringModal.querySelector('.modal-content div');
    }

    function openInjectMessageModal(nodeId) {
        const content = openMonitoringModal();
        let lastMessage = RED.monitoring.data[nodeId].input.slice(-1)[0];
        lastMessage = (lastMessage == null ? '' : lastMessage.y);

        content.innerHTML = `<h2>Node: ${nodeId}</h2><h3>Inject Message</h3>`
            + `<div><label>Payload: </label><input type="text" value="${JSON.stringify(lastMessage).replace(/"/g, "'")}">`
            + '<button style="margin-left:0.5em;" type="submit">Send!</button></div>';

        const inputMessage = document.querySelector('.modal-content input');

        document.querySelector('.modal-content button').addEventListener('click', (event) => {
            const injectMessage = {
                _msgid: (1 + Math.random() * 4294967295).toString(16),
                topic: '',
                payload: inputMessage.value.replace(/'/g, '"'),
            };

            RED.nodes.sendMessage(nodeId, injectMessage, 'debug');
            monitoringModal.style.display = 'none';
        });
    }

    function openLastMessages(nodeId) {
        const win = window.open('', '', `width=500,height=400,top=${screen.height / 3},left=${screen.width / 3}`);
        win.document.body.innerHTML = '<div class="monitoring-data">'
            + `<h1>Node: ${nodeId}</h1><h2> Last Messages:</h2>`
            + '<div class="monitoring-values-input"><ul style="max-height:250px;overflow:auto;"><h3>Input 0</h3></ul></div>'
            + '<div class="monitoring-values-output"></div>'
            + '</div>';

        const nodeDataDiv = win.document.querySelector('.monitoring-data');

        RED.monitoring.data[nodeId].input.map((message) => {
            nodeDataDiv.querySelector('.monitoring-values-input ul').innerHTML += `<li>${
                convertMessageToHTML(message)}</li>`;
        });

        RED.monitoring.data[nodeId].output.map((outputMessages, outputNumber) => {
            const outputDiv = nodeDataDiv.querySelector('.monitoring-values-output');
            outputDiv.innerHTML += `<ul style="max-height:250px;overflow:auto;"><h3>Output ${outputNumber}</h3></ul>`;

            outputMessages.map((message) => {
                outputDiv.querySelectorAll('ul')[outputNumber].innerHTML += `<li>${convertMessageToHTML(message)}</li>`;
            });
        });
    }

    function convertMessageToHTML(message) {
        return `<span>Time: ${message.x.toLocaleString()}-${message.x.getMilliseconds()}</span> - <span>Value: ${JSON.stringify(message.y)}</span>`;
    }

    function toggleBreakpointButtons(nodeId) {
        const playPauseButton = document.getElementById(`playPause-${nodeId}`);

        if (RED.monitoring.data[nodeId].settings.pauseDebug) {
            playPauseButton.classList.remove('fa-pause');
            playPauseButton.classList.add('fa-play');

            document.getElementById(`clear-${nodeId}`).style.display = '';
            document.getElementById(`step-${nodeId}`).style.display = '';
        } else {
            playPauseButton.classList.remove('fa-play');
            playPauseButton.classList.add('fa-pause');

            document.getElementById(`clear-${nodeId}`).style.display = 'none';
            document.getElementById(`step-${nodeId}`).style.display = 'none';
        }
    }

    function writeMessage(nodeId, timestamp, value) {
        waitForElm(`monitoring-${nodeId}`).then(elm => {
            const nodeDataDiv = elm.querySelector('.monitoring-details');
            const valuesDiv = nodeDataDiv.querySelector('.monitoring-values');
    
            valuesDiv.innerHTML = `<span>Time: ${timestamp.toLocaleTimeString()}</span><br>`
                + '<span>Value: </span>';
    
            if (RED.monitoring.data[nodeId].settings.pauseDebug) {
                valuesDiv.innerHTML += `<input class="breakpoint-modify-message" type="text" value="${JSON.stringify(value).replace(/"/g, "'")}" style="width: 150px; height: 25px;"></input>`;
            } else {
                valuesDiv.innerHTML += `<span style="white-space: nowrap;" >${value}</span>`;
            }
        });
    }

    function getMessageInputStep(nodeId) {
        const nodeDataDiv = document.getElementById(`monitoring-${nodeId}`).querySelector('.monitoring-details');
        const valuesDiv = nodeDataDiv.querySelector('.monitoring-values');

        if (RED.monitoring.data[nodeId].settings.pauseDebug) {
            if (valuesDiv.innerHTML == '') return;
            const input = valuesDiv.querySelector('input');
            if (!input) return;
            return input.value.replace(/'/g, '"');
        }
    }

    function playPauseBreakpoint(nodeId) {
        RED.monitoring.data[nodeId].settings.pauseDebug = !RED.monitoring.data[nodeId].settings.pauseDebug;

        RED.nodes.sendMessage(nodeId, null, 'breakpoint', 'play/pause');

        toggleBreakpointButtons(nodeId);
    }

    function stepBreakpoint(nodeId) {
        const value = getMessageInputStep(nodeId);
        if (value == null) return;
        const messageSaved = RED.monitoring.data[nodeId].input.slice(-1)[0];
        const message = {
            _msgid: messageSaved.id,
            payload: value,
        };

        RED.nodes.sendMessage(nodeId, message, 'breakpoint', 'step');
    }

    function clearBreakpoint(nodeId) {
        RED.nodes.sendMessage(nodeId, null, 'breakpoint', 'clear');
    }

    function clearMessages(nodeId) {
        RED.monitoring.clearMessages(nodeId);
    }

    function checkUserNodeConfigs(nodeId, eventType, portNumber) {
        const nodeSettings = RED.monitoring.data[nodeId].settings;

        return nodeSettings.defaultMessages == eventType && nodeSettings.portNumber == portNumber;
    }

    function clearHTMLNodeMessages(nodeId) {
        const nodeDataDiv = document.getElementById(`monitoring-${nodeId}`).querySelector('.monitoring-details');
        const valuesDiv = nodeDataDiv.querySelector('.monitoring-values');
        valuesDiv.innerHTML = '';
    }

    function updateHTMLNode(nodeId, value, timestamp, eventType, portNumber) {
        if (!checkUserNodeConfigs(nodeId, eventType, portNumber)) return;
        if (RED.view.getActiveNodes().filter((node) => node.id == nodeId).length == 0) return;

        writeMessage(nodeId, timestamp, value);

        drawGraphic(nodeId);
    }

    function drawGraphic(nodeId) {
        const nodeSettings = RED.monitoring.data[nodeId].settings;
        const data = RED.monitoring.data[nodeId][nodeSettings.defaultMessages];

        let values = (Array.isArray(data[0]) ? data[nodeSettings.portNumber] : data);
        const filter = getTrackedAttribute(nodeId);
        
        let appValues = values.map((value) => {
            return {x: value.x, y: (typeof(value.y) === 'number')? value.y : RED.monitoring.findAttr(value.y, filter)};
        });

        values = appValues;

        waitForElm(`chart-${nodeId}`).then(elm => {  
            const graphicElement = elm
            const ctx = graphicElement.getContext('2d');

            const graphicConfigs = {
                type: 'line',
                data: {
                    datasets: [{
                        backgroundColor: 'rgb(255, 99, 132)',
                        borderColor: 'rgb(255, 99, 132)',
                        data: [],
                        fill: false,
                    }],
                },
                options: {
                    events: [],
                    elements: {
                        point: {
                            pointStyle: 'circle',
                        },
                    },
                    animation: {
                        duration: 0,
                    },
                    legend: {
                        display: false,
                    },
                    scales: {
                        xAxes: [{
                            type: 'time',
                            distribution: 'linear',
                            time: {
                                unit: 'second',
                            },
                            ticks: {
                                display: false,
                            },
                            display: false,

                        }],
                        yAxes: [{
                            ticks: {
                                display: false,
                            },
                            display: false,
                        }],
                    },
                },
            };

            const numberOfPointsDisplayed = RED.monitoring.settings.graphicPointsDisplayed;

            let dataParsed = [];
            if (!(values[0] && typeof(values[0].y) === 'number')) {
                graphicConfigs.type = 'scatter';
                graphicConfigs.options.elements.point.pointStyle = 'rectRot';
                dataParsed = values.map((value) => ({x: value.x, y: 1}));
            } else {
                dataParsed = values.map((value) => ({x: value.x, y: value.y}));
            }

            graphicConfigs.data.datasets[0].data = dataParsed.slice((values.length - numberOfPointsDisplayed < 0 ? 0 : values.length - numberOfPointsDisplayed), values.length);

            new Chart(ctx, graphicConfigs);
        });
    }

    // ritorna una stringa o un array di stringhe con i filtri fa applicare al messaggio
    function getTrackedAttribute(nodeId){
        let elm = document.getElementById(`track-${nodeId}`);
        if(elm != null){
            let filter = elm.value; 
            let str = "";
            if(filter == "") {
                str = 'payload';
            } else if(filter.includes('.')){
                str = filter.split('.')
            } else {
                str = filter;
            }
    
            return str;
        } else {
            return 'payload';
        }
    }

    return {
        injectHTMLIntoNode,
        updateHTMLNode,
        addMonitoringModal,
        clearHTMLNodeMessages,
        updateMonitoringSize,
        getTrackedAttribute,
        toggleBreakpointButtons,
    };
}());